name: Update Rules
on: 
  schedule:
    - cron: '30 18 * * *' # UTC+8，实际是北京时间凌晨02:30

  push:
    paths:
      - '.github/workflows/Update Rules.yaml'
      - 'rules/*/IncludeDomain.txt'
      - 'rules/*/ExcludeDomain.txt'

  workflow_dispatch:

  repository_dispatch:
   type:
    - [Manual-Update]

jobs:
  update-rules:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main

      - name: Update Rules
        continue-on-error: false
        run: |
          cd upstream
          rm -rf *
          mkdir ad
          mkdir cn
          mkdir gfw
          cd ad
          wget https://raw.githubusercontent.com/neodevpro/neodevhost/master/smartdns.conf
          # wget https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Advertising/Advertising_Classical.yaml
          wget https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/anti-ad-smartdns.conf
          wget https://raw.githubusercontent.com/Cats-Team/AdRules/main/smart-dns.conf
          cd ../
          cd cn
          wget https://raw.githubusercontent.com/pmkol/easymosdns/refs/heads/rules/china_domain_list.txt
          wget https://raw.githubusercontent.com/jqyisbest/ios_rule_script/refs/heads/master/rule/Clash/ChinaMax/ChinaMax_Classical.yaml
          cd ../
          cd gfw
          wget https://raw.githubusercontent.com/pmkol/easymosdns/refs/heads/rules/gfw_domain_list.txt
          wget https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Global/Global_Classical.yaml
          cd ../
          cd ../
          
          update_time="$(TZ=UTC-8 date +'%Y-%m-%d %H:%M:%S')(GMT+8)"




          cd rules/ad
          
          mkdir temp
          cat ./ExcludeDomain.txt | sort | uniq > temp/ExcludeDomain.txt
          cat ./IncludeDomain.txt | sort | uniq > temp/IncludeDomain.txt
          cat ../../upstream/ad/*.conf | sed '/^#/d' | sort | uniq > temp/smartdns.conf
          cat ../../upstream/ad/*.yaml | grep -E '\s*-.*,.*' | sort | uniq > temp/clash.yaml
          cat temp/clash.yaml | sed '/\s*-\s*DOMAIN.*/d' > temp/clash_without_domain.yaml
          cat temp/clash_without_domain.yaml | sed '/\s*-\s*PROCESS-NAME.*/d' > temp/clash_without_domain_processs.yaml
          cat temp/smartdns.conf | sed -r 's/address\s*\/(.*)\/#/\1/g' > temp/temp.txt
          cat temp/clash.yaml | grep -E '\s*-\s*DOMAIN.*,.*' | sed -r 's/\s*-\s*DOMAIN.*,(.*)/\1/g' >> temp/temp.txt
          cat temp/IncludeDomain.txt >> temp/temp.txt
          cat temp/temp.txt | sort | uniq > temp/ad_domain_list.txt
          # comm -2 -3 temp/ad_domain_list.txt temp/ExcludeDomain.txt | sed '/^$/d' > ad_domain_list.txt
          cat temp/ExcludeDomain.txt |while read domain
          do
            if [[ -n $domain ]]; then
              sed -i -r "/$domain\$/d" temp/ad_domain_list.txt
            fi
          done
          cat temp/ad_domain_list.txt | sed '/^$/d' > ad_domain_list.txt
          
          cat ../../title/smartdns_title.txt > smartdns.conf 
          echo "#" >> smartdns.conf
          echo "# Total count: $(wc -l < ad_domain_list.txt)" >> smartdns.conf
          echo "#" >> smartdns.conf
          echo "# Update: $update_time" >> smartdns.conf
          echo "#" >> smartdns.conf
          echo "#==========================================================================" >> smartdns.conf
          cat ad_domain_list.txt | awk '{printf "address /%s/#\n",$0}' >> smartdns.conf
          
          cat ../../title/clash_title.txt > clash.yaml
          echo "#" >> clash.yaml
          echo "# Total count: $(expr $(wc -l < ad_domain_list.txt) + $(wc -l < temp/clash_without_domain.yaml))" >> clash.yaml
          echo "#" >> clash.yaml
          echo "# Update: $update_time" >> clash.yaml
          echo "#" >> clash.yaml
          echo "#==========================================================================" >> clash.yaml
          echo "payload:" >> clash.yaml
          cat ad_domain_list.txt | awk '{printf "  - DOMAIN-SUFFIX,%s\n",$0}' >> clash.yaml
          cat temp/clash_without_domain.yaml >> clash.yaml

          cat ../../title/loon_title.txt > loon.list
          echo "#" >> loon.list
          echo "# Total count: $(expr $(wc -l < ad_domain_list.txt) + $(wc -l < temp/clash_without_domain_processs.yaml))" >> loon.list
          echo "#" >> loon.list
          echo "# Update: $update_time" >> loon.list
          echo "#" >> loon.list
          echo "#==========================================================================" >> loon.list
          cat ad_domain_list.txt | awk '{printf "DOMAIN-SUFFIX,%s\n",$0}' >> loon.list
          cat temp/clash_without_domain_processs.yaml | sed -r "s/  - (.*)/\1/g" >> loon.list

          cat ../../title/adguard_title.txt > adguard_dns.txt
          echo "!" >> adguard_dns.txt
          echo "! Total count: $(wc -l < ad_domain_list.txt)" >> adguard_dns.txt
          echo "!" >> adguard_dns.txt
          echo "! Version: $update_time" >> adguard_dns.txt
          echo "!" >> adguard_dns.txt
          cat ad_domain_list.txt | awk '{printf "||%s^$important\n",$0}' >> adguard_dns.txt
          
          rm -rf temp
          cd ../../
  



          cd rules/cn
          
          mkdir temp
          cat ./ExcludeDomain.txt | sort | uniq > temp/ExcludeDomain.txt
          cat ./IncludeDomain.txt | sort | uniq > temp/IncludeDomain.txt
          cat ../../upstream/cn/*.txt | sed '/^#/d' | sort | uniq > temp/temp.txt
          cat ../../upstream/cn/ChinaMax_Classical.yaml | grep -E '\s*-.*,.*' | sort | uniq > temp/clash.yaml
          cat temp/clash.yaml | sed '/\s*-\s*DOMAIN.*/d' > temp/clash_without_domain.yaml
          cat temp/clash_without_domain.yaml | sed '/\s*-\s*PROCESS-NAME.*/d' > temp/clash_without_domain_processs.yaml
          cat temp/clash.yaml | grep -E '\s*-\s*DOMAIN.*,.*' | sed -r 's/\s*-\s*DOMAIN.*,(.*)/\1/g' >> temp/temp.txt
          cat temp/IncludeDomain.txt >> temp/temp.txt
          cat temp/temp.txt | sort | uniq > temp/cn_domain_list.txt
          # comm -2 -3 temp/cn_domain_list.txt temp/ExcludeDomain.txt | sed '/^$/d' > cn_domain_list.txt
          cat temp/ExcludeDomain.txt |while read domain
          do
            if [[ -n $domain ]]; then
              sed -i -r "/$domain\$/d" temp/cn_domain_list.txt
            fi
          done
          cat temp/cn_domain_list.txt | sed '/^$/d' > cn_domain_list.txt

          cat ../../title/smartdns_title.txt > smartdns.conf 
          echo "#" >> smartdns.conf
          echo "# Total count: $(wc -l < cn_domain_list.txt)" >> smartdns.conf
          echo "#" >> smartdns.conf
          echo "# Update: $update_time" >> smartdns.conf
          echo "#" >> smartdns.conf
          echo "#==========================================================================" >> smartdns.conf
          cat cn_domain_list.txt | awk '{printf "address /%s/#\n",$0}' >> smartdns.conf
          
          cat ../../title/clash_title.txt > clash.yaml
          echo "#" >> clash.yaml
          echo "# Total count: $(expr $(wc -l < cn_domain_list.txt) + $(wc -l < temp/clash_without_domain.yaml))" >> clash.yaml
          echo "#" >> clash.yaml
          echo "# Update: $update_time" >> clash.yaml
          echo "#" >> clash.yaml
          echo "#==========================================================================" >> clash.yaml
          echo "payload:" >> clash.yaml
          cat cn_domain_list.txt | awk '{printf "  - DOMAIN-SUFFIX,%s\n",$0}' >> clash.yaml
          cat temp/clash_without_domain.yaml >> clash.yaml

          cat ../../title/loon_title.txt > loon.list
          echo "#" >> loon.list
          echo "# Total count: $(expr $(wc -l < cn_domain_list.txt) + 1)" >> loon.list
          # echo "# Total count: $(expr $(wc -l < cn_domain_list.txt) + $(wc -l < temp/clash_without_domain_processs.yaml) + 1)" >> loon.list
          echo "#" >> loon.list
          echo "# Update: $update_time" >> loon.list
          echo "#" >> loon.list
          echo "#==========================================================================" >> loon.list
          cat cn_domain_list.txt | awk '{printf "DOMAIN-SUFFIX,%s\n",$0}' >> loon.list
          # 鉴于Loon中sni辅助规则匹配功能实为将所有请求优先按来自host/sni的域名进行策略匹配，在此处加入GEOIP,CN防止直连境外IP
          # cat cn_domain_list.txt | awk '{printf "AND,((GEOIP,CN),(DOMAIN-SUFFIX,%s))\n",$0}' >> loon.list
          # cat temp/clash_without_domain_processs.yaml | sed -r "s/  - (.*)/\1/g" >> loon.list
          # Loon中国分流以GEOIP,CN收尾
          echo -n "GEOIP,CN" >> loon.list 
          
          rm -rf temp
          cd ../../




          cd rules/gfw
          
          mkdir temp
          cat ./ExcludeDomain.txt | sort | uniq > temp/ExcludeDomain.txt
          cat ./IncludeDomain.txt | sort | uniq > temp/IncludeDomain.txt
          cat ../../upstream/gfw/*.txt | sed '/^#/d' | sort | uniq > temp/temp.txt
          cat ../../upstream/gfw/Global_Classical.yaml | grep -E '\s*-.*,.*' | sort | uniq > temp/clash.yaml
          cat temp/clash.yaml | sed '/\s*-\s*DOMAIN.*/d' > temp/clash_without_domain.yaml
          cat temp/clash_without_domain.yaml | sed '/\s*-\s*PROCESS-NAME.*/d' > temp/clash_without_domain_processs.yaml
          cat temp/clash.yaml | grep -E '\s*-\s*DOMAIN.*,.*' | sed -r 's/\s*-\s*DOMAIN.*,(.*)/\1/g' >> temp/temp.txt
          cat temp/IncludeDomain.txt >> temp/temp.txt
          cat temp/temp.txt | sort | uniq > temp/gfw_domain_list.txt
          # comm -2 -3 temp/gfw_domain_list.txt temp/ExcludeDomain.txt | sed '/^$/d' > gfw_domain_list.txt
          cat temp/ExcludeDomain.txt |while read domain
          do 
            if [[ -n $domain ]]; then
              sed -i -r "/$domain\$/d" temp/gfw_domain_list.txt
            fi
          done
          cat temp/gfw_domain_list.txt | sed '/^$/d' > gfw_domain_list.txt

          cat ../../title/smartdns_title.txt > smartdns.conf 
          echo "#" >> smartdns.conf
          echo "# Total count: $(wc -l < gfw_domain_list.txt)" >> smartdns.conf
          echo "#" >> smartdns.conf
          echo "# Update: $update_time" >> smartdns.conf
          echo "#" >> smartdns.conf
          echo "#==========================================================================" >> smartdns.conf
          cat gfw_domain_list.txt | awk '{printf "address /%s/#\n",$0}' >> smartdns.conf
          
          cat ../../title/clash_title.txt > clash.yaml
          echo "#" >> clash.yaml
          echo "# Total count: $(expr $(wc -l < gfw_domain_list.txt) + $(wc -l < temp/clash_without_domain.yaml))" >> clash.yaml
          echo "#" >> clash.yaml
          echo "# Update: $update_time" >> clash.yaml
          echo "#" >> clash.yaml
          echo "#==========================================================================" >> clash.yaml
          echo "payload:" >> clash.yaml
          cat gfw_domain_list.txt | awk '{printf "  - DOMAIN-SUFFIX,%s\n",$0}' >> clash.yaml
          cat temp/clash_without_domain.yaml >> clash.yaml

          cat ../../title/loon_title.txt > loon.list
          echo "#" >> loon.list
          echo "# Total count: $(expr $(wc -l < gfw_domain_list.txt) + $(wc -l < temp/clash_without_domain_processs.yaml))" >> loon.list
          echo "#" >> loon.list
          echo "# Update: $update_time" >> loon.list
          echo "#" >> loon.list
          echo "#==========================================================================" >> loon.list
          cat gfw_domain_list.txt | awk '{printf "DOMAIN-SUFFIX,%s\n",$0}' >> loon.list
          cat temp/clash_without_domain_processs.yaml | sed -r "s/  - (.*)/\1/g" >> loon.list
          
          rm -rf temp
      - name: Git push assets to Github
        run: |
          git init
          git config --local user.name "actions"
          git config --local user.email "action@github.com"  
          git add .
          git commit -m "Update at $(TZ=UTC-8 date +"%Y-%m-%d %H:%M")"
          git push -f -u origin main

      - name: Force refresh cdn cache
        run: |
          function scan() {
              for e in `ls $1`
              do
                  object=$1"/"$e
                  if [ -d $object ]
                  then
                      scan $object
                  else
                      url="https://purge.jsdelivr.net/gh/jqyisbest/CustomDiversionRules@refs/heads/main/"${object}
                      code=`curl -s -o /dev/null --retry 5 -w %{http_code} $url`
                      echo "Refresh jsdelivr cache file https://github.com/jqyisbest/CustomDiversionRules/blob/main/"${object}" [ "$code" ]"
                      if [ $code != "200" ]
                      then
                          url="https://purge.jsdelivr.net/gh/jqyisbest/CustomDiversionRules@refs/heads/main/"${object}
                          echo " - Retry "$url" [ `curl -s -o /dev/null --retry 5 -w %{http_code} $url` ]"
                      fi
                      url="https://purge.jsdelivr.net/gh/jqyisbest/CustomDiversionRules@refs/heads/main/"${object}
                      echo " -> "$url" [ `curl -s -o /dev/null --retry 5 -w %{http_code} $url` ]"
                  fi
              done
          }
          scan rules
      # - name: Git push assets to other repos
      #   continue-on-error: true
      #   run: |
      #     rm -rf .git/
      #     git init          
      #     git config --local user.name "hacamer"
      #     git config --local user.email "hcamer145@gmail.com"
      #     git remote add origin "https://cats-team:${{ secrets.GITLAB_TOKEN }}@gitlab.com/cats-team/adrules.git"
      #     git remote set-url --add origin "https://hacamer:${{ secrets.GITEA_TOKEN }}@gitea.com/Cats-Team/AdRules.git"
      #     git remote set-url --add origin "https://hacamer:${{ secrets.BITBUCKET_TOKEN }}@bitbucket.org/hacamer/adrules.git"
      #     git checkout --orphan clearhistory
      #     git add *.{conf,html,txt,json,srs,list} rules/* mod/*
      #     git commit -am "Update at $(TZ=UTC-8 date +"%Y-%m-%d %H:%M")"
      #     git branch -m main
      #     git push --force --set-upstream origin main
      # - name: Auto Built
      #   continue-on-error: true
      #   run: |
      #     curl -X POST "${{ secrets.CF_TOKEN }}"
